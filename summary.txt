
# MongoDB CRUD
 

# Mongoose Data Validation Samples 


# Vidly exercise

**************************
# Transaction
# Create Atomic Task to save, update, ....
npm i fawn

# see vidly/routes/rentals.js, router.post method.
# save a new rental object and update movie stock in atomic transaction


**************************
# ObjectID
# Check a valid ObjectID
npm i joi-objectid

# Check that objectId passed as argument is a valid ObjectID
# requires Joi
const Joi = require('@hapi/joi');
# requires 'joi-objectid' passing Joi object reference, and get a function 'Joi.objectId'
Joi.objectId = require('joi-objectid')(Joi);

# Joi.objectId has some method (e.g. required())
function validateRental(rental) {
    const schema = Joi.object({
        customerId: Joi.objectId().required(),
        ...
    ....

**************************
# Lodash ( like _ 'underscore' library but more powerful )
npm i lodash

// lodash approach
# _.pick(req.body, ['name','email','password'])
#   param1: the object that contains the properties
#   param2: the properties to pick up (array of key properties) from the object
user = new User(_.pick(req.body, ['name','email','password']));

# _.pick(user, ['_id', 'name', 'email']
res.send(_.pick(user, ['_id', 'name', 'email']));

**************************
# Password complexity
joi-password-complexity

**************************
# Password hashing
npm i bcrypt

# fist generate a Sault (default 10)
# then call 'hash' method to get the password with the generated Salt.
const salt = await bcrypt.genSalt(10);
user.password = await bcrypt.hash(user.password, salt);

# param1: password provided by the user (in request.body)
# param2: hashed password stored in DB
# bcrypt extract the Salt from the user.password stored in DB and use it to hash the password provided by the user and check if they match
const isValid = await bcrypt.compare(req.body.password, user.password);

**************************
# JWT (JSON Web Token)
npm i jsonwebtoken

# generate the token providing 1. the payload and 2. the secret key
# param1: payload (e.g. user._id)
# param2: secret key, stored in environment variable defined in custom-environment-variables.json
const token = jwt.sign({ id: user._id }, config.get('jwtPrivateKey'));

# encapsulate token generation in mongoose schema object
# models/user.js  .. user object has to generate the token
# rembember to implement the function BEFORE creating User object (mongoose.model('User', userSchema))
userSchema.methods.generateAuthToken = function() {
    ...

# get the token calling 
const token = user.generateAuthToken();
# return the token to client in an header key
# header key should be prefix with 'x-'
res.header('x-auth-token', token).send(...)

# Use the Json Web Token to protect the routes.
# middleware function in auth.js
    function auth(req, res, next) {
    ....
    # get the token that should be present in the request header
    const token = req.header('x-auth-token');
    # if not present respond with 401 Unauthorized
    if (!token) return res.status(401).send('Access denied. No token provided');

    # if present, verify the token calling verify
    # param1: token
    # param2: the secret key (stored in environment variable)
    # return the decoded token (the payload)
    const decodedToken = jwt.verify(token, config.get('jwtPrivateKey'));
    # store the decoded token in req.user object
    req.user = decodedToken;

    # go to the next middleware function
    next();

# middleware function in admin.js
    function(req, res, next) { 
    ...
    # check if req.user object has 'isAdmin' property set and if the value is true
    # if 'isAdmin' not present or the value is false respond with 403 Forbidden.
    if (!req.user.isAdmin) return res.status(403).send('Forbidden');

# use the middleware functions to protect the routes

# enable the post request if authentication is passed providing a valid token,
# param2: the middleware function (auth) imported with require statement
router.post('/', auth, async (req, res) => {

# after checking for auth, it checks also if the user has 'isAdmin' true
# param2: an arrya of middleware functions executed in the same order.
router.delete('/:id', [auth, admin], async (req, res) => {


**************************
ExpressJS Async Errors
npm i express-async-errors
# this module implements the same function in middleware/async module.
# it wraps the second parameter of the route handler to an async middleware function calling next() if any errors occur.

# vidly/index.js
require('express-async-errors');
# so, any route handler use the middleware function in express-async-errors module

**************************
Logger module
npm i winston


**************************
# Config module
npm i config
